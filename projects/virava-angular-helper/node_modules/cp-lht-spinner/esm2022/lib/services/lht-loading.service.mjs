import { Injectable } from '@angular/core';
import { ComponentPortal } from '@angular/cdk/portal';
import { LhtSpinnerComponent } from '../component/lht-spinner.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "./lht-spinner-settings.service";
export class LhtLoadingService {
    constructor(overlay, lhtSpinnerSettingsService) {
        this.overlay = overlay;
        this.lhtSpinnerSettingsService = lhtSpinnerSettingsService;
        this.overlayRef = null;
        this.requestsCount = 0;
        this.showTimer = null;
    }
    show(spinnerLoadingText) {
        this.requestsCount++;
        const delayTime = this.lhtSpinnerSettingsService.libConfig.spinnerDelayTime || 0;
        if (spinnerLoadingText) {
            this.lhtSpinnerSettingsService.setLibConfig({
                ...this.lhtSpinnerSettingsService.libConfig,
                spinnerLoadingText,
            });
        }
        if (!this.overlayRef) {
            this.overlayRef = this.overlay.create();
        }
        if (this.showTimer === null) {
            if (delayTime > 0) {
                this.showTimer = setTimeout(() => {
                    this.attachSpinner();
                }, delayTime);
            }
            else {
                this.attachSpinner();
            }
        }
    }
    hide() {
        this.requestsCount--;
        if (this.requestsCount <= 0) {
            if (this.showTimer !== null) {
                clearTimeout(this.showTimer);
                this.showTimer = null;
            }
            this.requestsCount = 0;
            if (this.overlayRef && this.overlayRef.hasAttached()) {
                this.overlayRef.detach();
            }
        }
    }
    attachSpinner() {
        if (this.overlayRef && !this.overlayRef.hasAttached()) {
            const loaderPortal = new ComponentPortal(LhtSpinnerComponent);
            this.overlayRef.attach(loaderPortal);
        }
        this.showTimer = null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtLoadingService, deps: [{ token: i1.Overlay }, { token: i2.LhtSpinnerSettingsService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtLoadingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtLoadingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.Overlay }, { type: i2.LhtSpinnerSettingsService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGh0LWxvYWRpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NwLWxodC1zcGlubmVyL3NyYy9saWIvc2VydmljZXMvbGh0LWxvYWRpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7OztBQU96RSxNQUFNLE9BQU8saUJBQWlCO0lBSzVCLFlBQ1UsT0FBZ0IsRUFDaEIseUJBQW9EO1FBRHBELFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjtRQU50RCxlQUFVLEdBQXNCLElBQUksQ0FBQztRQUNyQyxrQkFBYSxHQUFHLENBQUMsQ0FBQztRQUNsQixjQUFTLEdBQVEsSUFBSSxDQUFDO0lBSzNCLENBQUM7SUFFSixJQUFJLENBQUMsa0JBQTJCO1FBQzlCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQixNQUFNLFNBQVMsR0FDYixJQUFJLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLGdCQUFnQixJQUFJLENBQUMsQ0FBQztRQUVqRSxJQUFJLGtCQUFrQixFQUFFO1lBQ3RCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUM7Z0JBQzFDLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFNBQVM7Z0JBQzNDLGtCQUFrQjthQUNuQixDQUFDLENBQUM7U0FDSjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN6QztRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDM0IsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQy9CLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztnQkFDdkIsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ2Y7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3RCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQixJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFO1lBQzNCLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7Z0JBQzNCLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2FBQ3ZCO1lBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7WUFFdkIsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQ3BELElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFTyxhQUFhO1FBQ25CLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDckQsTUFBTSxZQUFZLEdBQUcsSUFBSSxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0QztRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7OEdBOURVLGlCQUFpQjtrSEFBakIsaUJBQWlCLGNBRmhCLE1BQU07OzJGQUVQLGlCQUFpQjtrQkFIN0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPdmVybGF5LCBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5cbmltcG9ydCB7IExodFNwaW5uZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQvbGh0LXNwaW5uZXIuY29tcG9uZW50JztcblxuaW1wb3J0IHsgTGh0U3Bpbm5lclNldHRpbmdzU2VydmljZSB9IGZyb20gJy4vbGh0LXNwaW5uZXItc2V0dGluZ3Muc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBMaHRMb2FkaW5nU2VydmljZSB7XG4gIHByaXZhdGUgb3ZlcmxheVJlZjogT3ZlcmxheVJlZiB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHJlcXVlc3RzQ291bnQgPSAwO1xuICBwcml2YXRlIHNob3dUaW1lcjogYW55ID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksXG4gICAgcHJpdmF0ZSBsaHRTcGlubmVyU2V0dGluZ3NTZXJ2aWNlOiBMaHRTcGlubmVyU2V0dGluZ3NTZXJ2aWNlXG4gICkge31cblxuICBzaG93KHNwaW5uZXJMb2FkaW5nVGV4dD86IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMucmVxdWVzdHNDb3VudCsrO1xuXG4gICAgY29uc3QgZGVsYXlUaW1lID1cbiAgICAgIHRoaXMubGh0U3Bpbm5lclNldHRpbmdzU2VydmljZS5saWJDb25maWcuc3Bpbm5lckRlbGF5VGltZSB8fCAwO1xuXG4gICAgaWYgKHNwaW5uZXJMb2FkaW5nVGV4dCkge1xuICAgICAgdGhpcy5saHRTcGlubmVyU2V0dGluZ3NTZXJ2aWNlLnNldExpYkNvbmZpZyh7XG4gICAgICAgIC4uLnRoaXMubGh0U3Bpbm5lclNldHRpbmdzU2VydmljZS5saWJDb25maWcsXG4gICAgICAgIHNwaW5uZXJMb2FkaW5nVGV4dCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vdmVybGF5UmVmKSB7XG4gICAgICB0aGlzLm92ZXJsYXlSZWYgPSB0aGlzLm92ZXJsYXkuY3JlYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2hvd1RpbWVyID09PSBudWxsKSB7XG4gICAgICBpZiAoZGVsYXlUaW1lID4gMCkge1xuICAgICAgICB0aGlzLnNob3dUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYXR0YWNoU3Bpbm5lcigpO1xuICAgICAgICB9LCBkZWxheVRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hdHRhY2hTcGlubmVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGlkZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlcXVlc3RzQ291bnQtLTtcblxuICAgIGlmICh0aGlzLnJlcXVlc3RzQ291bnQgPD0gMCkge1xuICAgICAgaWYgKHRoaXMuc2hvd1RpbWVyICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNob3dUaW1lcik7XG4gICAgICAgIHRoaXMuc2hvd1RpbWVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZXF1ZXN0c0NvdW50ID0gMDtcblxuICAgICAgaWYgKHRoaXMub3ZlcmxheVJlZiAmJiB0aGlzLm92ZXJsYXlSZWYuaGFzQXR0YWNoZWQoKSkge1xuICAgICAgICB0aGlzLm92ZXJsYXlSZWYuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhdHRhY2hTcGlubmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm92ZXJsYXlSZWYgJiYgIXRoaXMub3ZlcmxheVJlZi5oYXNBdHRhY2hlZCgpKSB7XG4gICAgICBjb25zdCBsb2FkZXJQb3J0YWwgPSBuZXcgQ29tcG9uZW50UG9ydGFsKExodFNwaW5uZXJDb21wb25lbnQpO1xuICAgICAgdGhpcy5vdmVybGF5UmVmLmF0dGFjaChsb2FkZXJQb3J0YWwpO1xuICAgIH1cblxuICAgIHRoaXMuc2hvd1RpbWVyID0gbnVsbDtcbiAgfVxufVxuIl19