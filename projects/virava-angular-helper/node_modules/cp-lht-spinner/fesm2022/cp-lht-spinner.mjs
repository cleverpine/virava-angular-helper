import * as i0 from '@angular/core';
import { Injectable, Inject, Component, NgModule } from '@angular/core';
import { ComponentPortal } from '@angular/cdk/portal';
import * as i1 from '@angular/cdk/overlay';

class LhtSpinnerSettingsService {
    constructor(config) {
        this.config = config;
    }
    get libConfig() {
        return this.config;
    }
    setLibConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerSettingsService, deps: [{ token: 'config' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerSettingsService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerSettingsService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: ['config']
                }] }] });

class LhtSpinnerComponent {
    constructor(lhtSpinnerSettingsService) {
        this.lhtSpinnerSettingsService = lhtSpinnerSettingsService;
        this.size = this.lhtSpinnerSettingsService.libConfig.spinnerSize || 100;
        this.loadingText = this.lhtSpinnerSettingsService.libConfig.spinnerLoadingText || 'Loading...';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerComponent, deps: [{ token: LhtSpinnerSettingsService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.4", type: LhtSpinnerComponent, selector: "lht-spinner", ngImport: i0, template: "<div class=\"spinner-wrapper\">\n  <div class=\"spinner\">\n    <svg\n      [style.width]=\"size\"\n      [style.height]=\"size\"\n      class=\"lht-spinner-ring\"\n      viewBox=\"0 0 38 38\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      stroke=\"#0a1d3d\"\n    >\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <g transform=\"translate(1 1)\" stroke-width=\"2\">\n          <circle stroke-opacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n          <path d=\"M36 18c0-9.94-8.06-18-18-18\"></path>\n        </g>\n      </g>\n    </svg>\n    <svg\n      [style.width]=\"size\"\n      [style.height]=\"size\"\n      id=\"crane\"\n      version=\"1.0\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 880 880\"\n      preserveAspectRatio=\"xMidYMid meet\"\n    >\n      <g\n        fill=\"#0a1d3d\"\n        stroke=\"none\"\n        transform=\"translate(0,880) scale(0.1,-0.1)\"\n      >\n        <path\n          d=\"M870 5348 l0 -103 133 -59 c217 -97 641 -309 807 -404 258 -148 453 -271 955 -602 264 -175 548 -358 630 -408 876 -524 1879 -920 2833 -1118 l133 -28 142 142 142 142 -105 0 c-485 0 -1046 152 -1483 403 -193 110 -330 210 -506 367 -120 108 -122 95 37 183 387 214 781 331 1237 368 162 13 641 7 822 -10 55 -6 134 -13 175 -17 l74 -6 88 83 c60 57 83 85 74 89 -15 9 -136 24 -358 46 -212 21 -923 30 -1145 15 -92 -7 -168 -11 -170 -9 -2 2 27 35 64 75 l67 72 279 7 c393 9 853 -15 1235 -66 80 -11 151 -20 159 -20 13 0 181 157 181 170 0 8 -322 54 -525 74 -264 28 -461 38 -811 45 l-352 6 47 62 46 63 200 0 c327 0 734 -26 1045 -66 149 -19 437 -64 454 -70 13 -5 201 164 192 173 -7 8 -346 61 -556 87 -337 43 -688 67 -1126 79 l-82 2 37 63 36 64 218 -6 c469 -13 1131 -81 1507 -155 l95 -19 90 88 c49 49 86 92 83 96 -24 23 -846 140 -1193 169 -562 47 -1206 47 -1624 2 l-106 -12 -39 -75 c-138 -268 -276 -462 -455 -641 -393 -392 -851 -519 -1341 -373 -107 32 -270 99 -391 159 -97 49 -589 322 -601 333 -4 4 10 19 31 34 l37 26 434 -188 434 -188 58 46 c32 25 55 49 51 53 -8 7 -1688 779 -1696 779 -3 0 -43 -31 -91 -69 l-86 -69 -242 104 c-133 57 -250 106 -260 110 -17 5 -18 -3 -18 -98z\"\n        ></path>\n      </g>\n    </svg>\n\n    <span class=\"spinner-text\">{{ loadingText }}</span>\n  </div>\n</div>\n", styles: [".spinner-wrapper{position:fixed;width:100%;height:100%;top:0;left:0;z-index:99999;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.spinner-wrapper .spinner{display:flex;flex-direction:column;align-items:center;position:fixed;top:50%;left:50%;transform:translate(-50%,-50%)}.spinner-wrapper .lht-spinner-ring{position:absolute;animation:lht-ring-spin 1s cubic-bezier(.11,.95,.8,.15) infinite}@keyframes lht-ring-spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.spinner-wrapper .spinner-text{display:block;margin-top:.5rem;text-align:center;color:#000!important}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lht-spinner', template: "<div class=\"spinner-wrapper\">\n  <div class=\"spinner\">\n    <svg\n      [style.width]=\"size\"\n      [style.height]=\"size\"\n      class=\"lht-spinner-ring\"\n      viewBox=\"0 0 38 38\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      stroke=\"#0a1d3d\"\n    >\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <g transform=\"translate(1 1)\" stroke-width=\"2\">\n          <circle stroke-opacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n          <path d=\"M36 18c0-9.94-8.06-18-18-18\"></path>\n        </g>\n      </g>\n    </svg>\n    <svg\n      [style.width]=\"size\"\n      [style.height]=\"size\"\n      id=\"crane\"\n      version=\"1.0\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 880 880\"\n      preserveAspectRatio=\"xMidYMid meet\"\n    >\n      <g\n        fill=\"#0a1d3d\"\n        stroke=\"none\"\n        transform=\"translate(0,880) scale(0.1,-0.1)\"\n      >\n        <path\n          d=\"M870 5348 l0 -103 133 -59 c217 -97 641 -309 807 -404 258 -148 453 -271 955 -602 264 -175 548 -358 630 -408 876 -524 1879 -920 2833 -1118 l133 -28 142 142 142 142 -105 0 c-485 0 -1046 152 -1483 403 -193 110 -330 210 -506 367 -120 108 -122 95 37 183 387 214 781 331 1237 368 162 13 641 7 822 -10 55 -6 134 -13 175 -17 l74 -6 88 83 c60 57 83 85 74 89 -15 9 -136 24 -358 46 -212 21 -923 30 -1145 15 -92 -7 -168 -11 -170 -9 -2 2 27 35 64 75 l67 72 279 7 c393 9 853 -15 1235 -66 80 -11 151 -20 159 -20 13 0 181 157 181 170 0 8 -322 54 -525 74 -264 28 -461 38 -811 45 l-352 6 47 62 46 63 200 0 c327 0 734 -26 1045 -66 149 -19 437 -64 454 -70 13 -5 201 164 192 173 -7 8 -346 61 -556 87 -337 43 -688 67 -1126 79 l-82 2 37 63 36 64 218 -6 c469 -13 1131 -81 1507 -155 l95 -19 90 88 c49 49 86 92 83 96 -24 23 -846 140 -1193 169 -562 47 -1206 47 -1624 2 l-106 -12 -39 -75 c-138 -268 -276 -462 -455 -641 -393 -392 -851 -519 -1341 -373 -107 32 -270 99 -391 159 -97 49 -589 322 -601 333 -4 4 10 19 31 34 l37 26 434 -188 434 -188 58 46 c32 25 55 49 51 53 -8 7 -1688 779 -1696 779 -3 0 -43 -31 -91 -69 l-86 -69 -242 104 c-133 57 -250 106 -260 110 -17 5 -18 -3 -18 -98z\"\n        ></path>\n      </g>\n    </svg>\n\n    <span class=\"spinner-text\">{{ loadingText }}</span>\n  </div>\n</div>\n", styles: [".spinner-wrapper{position:fixed;width:100%;height:100%;top:0;left:0;z-index:99999;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.spinner-wrapper .spinner{display:flex;flex-direction:column;align-items:center;position:fixed;top:50%;left:50%;transform:translate(-50%,-50%)}.spinner-wrapper .lht-spinner-ring{position:absolute;animation:lht-ring-spin 1s cubic-bezier(.11,.95,.8,.15) infinite}@keyframes lht-ring-spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.spinner-wrapper .spinner-text{display:block;margin-top:.5rem;text-align:center;color:#000!important}\n"] }]
        }], ctorParameters: () => [{ type: LhtSpinnerSettingsService }] });

class LhtSpinnerModule {
    static forRoot(config) {
        return {
            ngModule: LhtSpinnerModule,
            providers: [
                LhtSpinnerSettingsService,
                { provide: 'config', useValue: config },
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerModule, declarations: [LhtSpinnerComponent], exports: [LhtSpinnerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtSpinnerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [LhtSpinnerComponent],
                    imports: [],
                    exports: [LhtSpinnerComponent],
                }]
        }] });

class LhtLoadingService {
    constructor(overlay, lhtSpinnerSettingsService) {
        this.overlay = overlay;
        this.lhtSpinnerSettingsService = lhtSpinnerSettingsService;
        this.overlayRef = null;
        this.requestsCount = 0;
        this.showTimer = null;
    }
    show(spinnerLoadingText) {
        this.requestsCount++;
        const delayTime = this.lhtSpinnerSettingsService.libConfig.spinnerDelayTime || 0;
        if (spinnerLoadingText) {
            this.lhtSpinnerSettingsService.setLibConfig({
                ...this.lhtSpinnerSettingsService.libConfig,
                spinnerLoadingText,
            });
        }
        if (!this.overlayRef) {
            this.overlayRef = this.overlay.create();
        }
        if (this.showTimer === null) {
            if (delayTime > 0) {
                this.showTimer = setTimeout(() => {
                    this.attachSpinner();
                }, delayTime);
            }
            else {
                this.attachSpinner();
            }
        }
    }
    hide() {
        this.requestsCount--;
        if (this.requestsCount <= 0) {
            if (this.showTimer !== null) {
                clearTimeout(this.showTimer);
                this.showTimer = null;
            }
            this.requestsCount = 0;
            if (this.overlayRef && this.overlayRef.hasAttached()) {
                this.overlayRef.detach();
            }
        }
    }
    attachSpinner() {
        if (this.overlayRef && !this.overlayRef.hasAttached()) {
            const loaderPortal = new ComponentPortal(LhtSpinnerComponent);
            this.overlayRef.attach(loaderPortal);
        }
        this.showTimer = null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtLoadingService, deps: [{ token: i1.Overlay }, { token: LhtSpinnerSettingsService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtLoadingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: LhtLoadingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.Overlay }, { type: LhtSpinnerSettingsService }] });

/*
 * Public API Surface of cp-lht-spinner
 */

/**
 * Generated bundle index. Do not edit.
 */

export { LhtLoadingService, LhtSpinnerComponent, LhtSpinnerModule, LhtSpinnerSettingsService };
//# sourceMappingURL=cp-lht-spinner.mjs.map
