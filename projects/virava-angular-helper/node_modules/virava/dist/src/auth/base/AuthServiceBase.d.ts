import { AuthConfigBase } from './AuthConfigBase';
import { AuthResponse } from '../../models/AuthResponse';
import { IAuthService } from '../../auth/base/IAuthService';
import { ICallbackFunctions } from '../../models/ICallbackFunctions';
export declare abstract class AuthServiceBase<T extends AuthConfigBase> implements IAuthService<T> {
    config: T;
    abstract init(confing: T): Promise<void> | void;
    abstract login(username?: string, password?: string): Promise<AuthResponse | void>;
    abstract register(email?: string, password?: string, confirmPassword?: string): Promise<AuthResponse | void>;
    abstract logout(): Promise<void>;
    /**
     * This method handles authentification statuses
     * @param status - Number
     * @param callBackFunctions - callback function
     */
    handleAuthStatuses: (status: number, callBackFunctions: ICallbackFunctions) => void;
    /**
     * This method checks if token is expired based on the `expirationDate` set in `localStorage`
     * @returns A boolean `isExpired`
     */
    isTokenExpired: (isRefresh?: boolean) => boolean;
}
