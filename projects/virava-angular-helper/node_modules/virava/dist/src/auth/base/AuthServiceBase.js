"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthServiceBase = void 0;
var constants_1 = require("../../utils/constants");
var helpers_1 = require("../../utils/helpers");
var AuthServiceBase = /** @class */ (function () {
    function AuthServiceBase() {
        var _this = this;
        /**
         * This method handles authentification statuses
         * @param status - Number
         * @param callBackFunctions - callback function
         */
        this.handleAuthStatuses = function (status, callBackFunctions) {
            switch (status) {
                case constants_1.STATUS_UNAUTHORIZED:
                    callBackFunctions.callbackOnUnauthorized && callBackFunctions.callbackOnUnauthorized();
                    break;
                case constants_1.STATUS_FORBIDDEN:
                    callBackFunctions.callbackOnForbidden && callBackFunctions.callbackOnForbidden();
                    break;
                case constants_1.STATUS_CUSTOM_LOGIN_ERROR:
                    callBackFunctions.callbackOnCustomLoginError && callBackFunctions.callbackOnCustomLoginError();
                    break;
                default:
                    return;
            }
        };
        /**
         * This method checks if token is expired based on the `expirationDate` set in `localStorage`
         * @returns A boolean `isExpired`
         */
        this.isTokenExpired = function (isRefresh) {
            var _a, _b;
            var isExpired = true;
            var expirationDate = isRefresh
                ? (0, helpers_1.getItem)(((_a = _this.config) === null || _a === void 0 ? void 0 : _a.expirationRefreshDateStorageKey) || constants_1.KEY_EXPIRATION_REFRESH)
                : (0, helpers_1.getItem)(((_b = _this.config) === null || _b === void 0 ? void 0 : _b.expirationDateStorageKey) || constants_1.KEY_EXPIRATION_DATE);
            if (expirationDate) {
                var currentDate = new Date().getTime();
                isExpired = currentDate > Number(expirationDate);
            }
            return isExpired;
        };
    }
    return AuthServiceBase;
}());
exports.AuthServiceBase = AuthServiceBase;
