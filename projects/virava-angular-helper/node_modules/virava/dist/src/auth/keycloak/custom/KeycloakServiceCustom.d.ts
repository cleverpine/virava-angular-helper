import { KeycloakConfigCustom } from "virava/dist/src/auth/keycloak/custom/KeycloakConfigCustom";
import { AuthResponse } from "virava/dist/src/models/AuthResponse";
import { AuthServiceBase } from "virava/dist/src/auth/base/AuthServiceBase";
export declare class KeycloakServiceCustom extends AuthServiceBase<KeycloakConfigCustom> {
    private endpointToken;
    private endpointLogout;
    private endpointRegister;
    private endpointResetPassword;
    private endpointChangePassword;
    /**
     * Initialises the auth service configuration
     * @param configuration
     */
    init(configuration: KeycloakConfigCustom): void;
    /**
     * Registers the user
     * @param email
     * @param password
     * @param confirmPassword
     * @returns Promise after the user is registered
     */
    register: (email: string, password: string, confirmPassword: string) => Promise<AuthResponse>;
    /**
     * Resets user's password
     * @param email
     * @returns Promise after user password reset
     */
    resetPassword: (email: string) => Promise<AuthResponse>;
    /**
     * Changes the user's password
     * @param email
     * @param currentPassword
     * @param newPassword
     * @param confirmPassword
     * @returns Promise after the user has changed his password
     */
    changePassword: (email: string, currentPassword: string, newPassword: string, confirmPassword: string) => Promise<AuthResponse>;
    /**
     * This method is designed to work with Direct Access Grant flow of OAuth.
     * @param username
     * @param password
     */
    login: (username: string, password: string) => Promise<AuthResponse | void>;
    /**
     * Logouts user and remove tokens from `localStorage`
     */
    logout: () => Promise<void>;
    /**
     * This method refreshes the token and sets the new ones in `localStorage`
     */
    refreshToken: () => Promise<AuthResponse | void>;
}
