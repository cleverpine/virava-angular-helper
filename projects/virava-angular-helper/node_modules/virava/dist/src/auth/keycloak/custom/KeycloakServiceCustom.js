"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeycloakServiceCustom = void 0;
var constants_1 = require("../../../utils/constants");
var helpers_1 = require("../../../utils/helpers");
var http_1 = require("../../../utils/http");
var AuthServiceBase_1 = require("../../base/AuthServiceBase");
var KeycloakServiceCustom = /** @class */ (function (_super) {
    __extends(KeycloakServiceCustom, _super);
    function KeycloakServiceCustom() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.endpointToken = '';
        _this.endpointLogout = '';
        _this.endpointRegister = '';
        _this.endpointResetPassword = '';
        _this.endpointChangePassword = '';
        /**
         * Registers the user
         * @param email
         * @param password
         * @param confirmPassword
         * @returns Promise after the user is registered
         */
        _this.register = function (email, password, confirmPassword) { return __awaiter(_this, void 0, void 0, function () {
            var body, data, e_1;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.gatewayBaseUrl)) {
                            throw new Error('Service not initialized!');
                        }
                        if (!email || !password || !confirmPassword) {
                            throw new Error('Credentials not supplied!');
                        }
                        if (password !== confirmPassword) {
                            throw new Error('Passwords don\'t match!');
                        }
                        body = {
                            email: email,
                            password: password,
                            confirmPassword: confirmPassword
                        };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, (0, http_1.post)(this.endpointRegister, body, constants_1.CONTENT_TYPE_JSON)];
                    case 2:
                        data = _b.sent();
                        return [2 /*return*/, data];
                    case 3:
                        e_1 = _b.sent();
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Resets user's password
         * @param email
         * @returns Promise after user password reset
         */
        _this.resetPassword = function (email) { return __awaiter(_this, void 0, void 0, function () {
            var body, data, e_2;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.gatewayBaseUrl)) {
                            throw new Error('Service not initialized!');
                        }
                        if (!email) {
                            throw new Error('Email for reset password not supplied!');
                        }
                        body = {
                            email: email
                        };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, (0, http_1.post)(this.endpointResetPassword, body, constants_1.CONTENT_TYPE_JSON)];
                    case 2:
                        data = _b.sent();
                        return [2 /*return*/, data];
                    case 3:
                        e_2 = _b.sent();
                        throw e_2;
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Changes the user's password
         * @param email
         * @param currentPassword
         * @param newPassword
         * @param confirmPassword
         * @returns Promise after the user has changed his password
         */
        _this.changePassword = function (email, currentPassword, newPassword, confirmPassword) { return __awaiter(_this, void 0, void 0, function () {
            var body, data, e_3;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.gatewayBaseUrl)) {
                            throw new Error('Service not initialized!');
                        }
                        if (!email || !currentPassword || !newPassword || !confirmPassword) {
                            throw new Error('Credentials not supplied!');
                        }
                        if (newPassword !== confirmPassword) {
                            throw new Error('Passwords don\'t match!');
                        }
                        body = {
                            email: email,
                            currentPassword: currentPassword,
                            newPassword: newPassword,
                            confirmPassword: confirmPassword
                        };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, (0, http_1.post)(this.endpointChangePassword, body, constants_1.CONTENT_TYPE_JSON)];
                    case 2:
                        data = _b.sent();
                        return [2 /*return*/, data];
                    case 3:
                        e_3 = _b.sent();
                        throw e_3;
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * This method is designed to work with Direct Access Grant flow of OAuth.
         * @param username
         * @param password
         */
        _this.login = function (username, password) { return __awaiter(_this, void 0, void 0, function () {
            var body, data, expirationDate, expirationRefresh, e_4;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.clientId) || !this.config.baseUrl) {
                            throw new Error('Service not initialized!');
                        }
                        if (!username || !password) {
                            throw new Error('Credentials not supplied!');
                        }
                        body = {
                            username: username,
                            password: password,
                            client_id: this.config.clientId,
                            grant_type: constants_1.GRANT_TYPE_PASSWORD
                        };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, (0, http_1.post)(this.endpointToken, body, constants_1.CONTENT_TYPE_FORM_URL_ENCODED)];
                    case 2:
                        data = _b.sent();
                        expirationDate = new Date().getTime() + data.expires_in * constants_1.MS_FOR_ONE_SECOND;
                        expirationRefresh = new Date().getTime() + data.refresh_expires_in * constants_1.MS_FOR_ONE_SECOND;
                        (0, helpers_1.setTokens)(this.config, {
                            access: data[constants_1.KEY_ACCESS_TOKEN],
                            refresh: data[constants_1.KEY_REFRESH_TOKEN],
                            expiration_date: expirationDate.toString(),
                            expiration_refresh: expirationRefresh.toString()
                        });
                        return [2 /*return*/, data];
                    case 3:
                        e_4 = _b.sent();
                        throw e_4;
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Logouts user and remove tokens from `localStorage`
         */
        _this.logout = function () { return __awaiter(_this, void 0, void 0, function () {
            var refreshTokenValue, body;
            var _this = this;
            var _a, _b;
            return __generator(this, function (_c) {
                if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.clientId) || !this.config.baseUrl) {
                    throw new Error('Service not initialized!');
                }
                if (this.isTokenExpired(true)) {
                    (0, helpers_1.removeTokens)(this.config);
                    return [2 /*return*/];
                }
                try {
                    refreshTokenValue = (0, helpers_1.getItem)(((_b = this.config) === null || _b === void 0 ? void 0 : _b.refreshTokenStorageKey) || constants_1.KEY_REFRESH_TOKEN);
                    body = {
                        client_id: this.config.clientId,
                        refresh_token: refreshTokenValue
                    };
                    return [2 /*return*/, (0, http_1.post)(this.endpointLogout, body, constants_1.CONTENT_TYPE_FORM_URL_ENCODED).then(function () {
                            (0, helpers_1.removeTokens)(_this.config);
                        })];
                }
                catch (e) {
                    throw e;
                }
                return [2 /*return*/];
            });
        }); };
        /**
         * This method refreshes the token and sets the new ones in `localStorage`
         */
        _this.refreshToken = function () { return __awaiter(_this, void 0, void 0, function () {
            var refreshTokenValue, body, data, expirationDate, expirationRefresh, e_5;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.clientId) || !((_b = this.config) === null || _b === void 0 ? void 0 : _b.baseUrl)) {
                            throw new Error('Service not initialized!');
                        }
                        if (this.isTokenExpired(true)) {
                            this.logout();
                            return [2 /*return*/];
                        }
                        refreshTokenValue = (0, helpers_1.getItem)(((_c = this.config) === null || _c === void 0 ? void 0 : _c.refreshTokenStorageKey) || constants_1.KEY_REFRESH_TOKEN) || '';
                        body = {
                            client_id: this.config.clientId,
                            refresh_token: refreshTokenValue,
                            grant_type: constants_1.GRANT_TYPE_REFRESH_TOKEN
                        };
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, (0, http_1.post)(this.endpointToken, body, constants_1.CONTENT_TYPE_FORM_URL_ENCODED)];
                    case 2:
                        data = _d.sent();
                        expirationDate = new Date().getTime() + data.expires_in * constants_1.MS_FOR_ONE_SECOND;
                        expirationRefresh = new Date().getTime() + data.refresh_expires_in * constants_1.MS_FOR_ONE_SECOND;
                        (0, helpers_1.setTokens)(this.config, {
                            access: data[constants_1.KEY_ACCESS_TOKEN],
                            refresh: data[constants_1.KEY_REFRESH_TOKEN],
                            expiration_date: expirationDate.toString(),
                            expiration_refresh: expirationRefresh.toString()
                        });
                        return [2 /*return*/, data];
                    case 3:
                        e_5 = _d.sent();
                        throw e_5;
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        return _this;
    }
    /**
     * Initialises the auth service configuration
     * @param configuration
     */
    KeycloakServiceCustom.prototype.init = function (configuration) {
        this.config = configuration;
        this.endpointToken = (0, helpers_1.stringReplace)(constants_1.API_ENDPOINT_TOKEN, [
            { key: '{BASE_URL}', value: this.config.baseUrl },
            { key: '{REALM}', value: this.config.realm },
        ]);
        this.endpointLogout = (0, helpers_1.stringReplace)(constants_1.API_ENDPOINT_LOGOUT, [
            { key: '{BASE_URL}', value: this.config.baseUrl },
            { key: '{REALM}', value: this.config.realm },
        ]);
        this.endpointRegister = "".concat(this.config.gatewayBaseUrl).concat(constants_1.API_ENDPOINT_REGISTER);
        this.endpointResetPassword = "".concat(this.config.gatewayBaseUrl).concat(constants_1.API_ENDPOINT_RESET_PASSWORD);
        this.endpointChangePassword = "".concat(this.config.gatewayBaseUrl).concat(constants_1.API_ENDPOINT_CHANGE_PASSWORD);
    };
    return KeycloakServiceCustom;
}(AuthServiceBase_1.AuthServiceBase));
exports.KeycloakServiceCustom = KeycloakServiceCustom;
