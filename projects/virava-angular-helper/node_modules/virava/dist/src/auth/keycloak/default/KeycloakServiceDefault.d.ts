import { KeycloakConfigDefault } from './KeycloakConfigDefault';
import { AuthResponse } from '../../../models/AuthResponse';
import { AuthServiceBase } from '../../../auth/base/AuthServiceBase';
export declare class KeycloakServiceDefault extends AuthServiceBase<KeycloakConfigDefault> {
    private keycloak;
    /**
     * Initialises the auth service configuration
     * @param configuration
     */
    init: (configuration: KeycloakConfigDefault) => Promise<void>;
    /**
     * Redirects the user to the keycloak login page.
     */
    login: () => Promise<AuthResponse | void>;
    /**
     * If it is refreshed - updates the values in `localStorage`.
     */
    updateToken: () => Promise<boolean>;
    /**
     * Logouts user and removes tokens from `localStorage`
     * @param redirectUri - url to be redirected after logout
     */
    logout: (redirectUri?: string) => Promise<void>;
    /**
     * Redirects the user to the register page
     */
    register: () => Promise<void>;
    /**
     * @returns if the user is authenticated
     */
    isAuthenticated: () => boolean;
    /**
     * Checks if the refresh token has expired and if it has, logs the user out, if it hasn't, updates the access and refresh tokens
     */
    checkIfTokenHasExpired: () => void;
    /**
    * @returns if the refresh token is expired
    */
    isRefreshTokenExpired: () => boolean;
    /**
     * @returns the number of seconds until the refresh token expires
     */
    getSecondsUntilTokenExpiration: () => number;
}
