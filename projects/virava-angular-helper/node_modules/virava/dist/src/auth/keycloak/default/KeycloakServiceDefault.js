"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeycloakServiceDefault = void 0;
var keycloak_js_1 = __importDefault(require("keycloak-js"));
var helpers_1 = require("../../../utils/helpers");
var AuthServiceBase_1 = require("../../../auth/base/AuthServiceBase");
var constants_1 = require("../../../utils/constants");
var KeycloakServiceDefault = /** @class */ (function (_super) {
    __extends(KeycloakServiceDefault, _super);
    function KeycloakServiceDefault() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Initialises the auth service configuration
         * @param configuration
         */
        _this.init = function (configuration) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.config = configuration;
                this.keycloak = new keycloak_js_1.default({
                    realm: this.config.realm,
                    url: this.config.baseUrl,
                    clientId: this.config.clientId,
                });
                return [2 /*return*/];
            });
        }); };
        /**
         * Redirects the user to the keycloak login page.
         */
        _this.login = function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var _a;
            return __generator(this, function (_b) {
                if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.clientId) || !this.config.baseUrl || !this.keycloak) {
                    throw new Error('Service not initialized!');
                }
                return [2 /*return*/, this.keycloak
                        .init({
                        onLoad: 'login-required',
                        checkLoginIframe: false,
                        pkceMethod: 'S256',
                    })
                        .then(function () {
                        (0, helpers_1.setTokens)(_this.config, {
                            access: _this.keycloak.token,
                            refresh: _this.keycloak.refreshToken,
                        });
                    })];
            });
        }); };
        /**
         * If it is refreshed - updates the values in `localStorage`.
         */
        _this.updateToken = function () {
            return new Promise(function (resolve, reject) {
                _this.keycloak
                    .updateToken(constants_1.ACCESS_TOKEN_UPDATE_MIN_VALIDITY)
                    .then(function (refreshed) {
                    if (refreshed) {
                        (0, helpers_1.setTokens)(_this.config, {
                            access: _this.keycloak.token,
                            refresh: _this.keycloak.refreshToken,
                        });
                    }
                    resolve(refreshed);
                })
                    .catch(function (error) {
                    _this.logout();
                    reject(new Error('Failed to refresh token ' + error));
                });
            });
        };
        /**
         * Logouts user and removes tokens from `localStorage`
         * @param redirectUri - url to be redirected after logout
         */
        _this.logout = function (redirectUri) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var _a;
            return __generator(this, function (_b) {
                if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.clientId) || !this.config.baseUrl || !this.keycloak) {
                    throw new Error('Service not initialized!');
                }
                return [2 /*return*/, this.keycloak.logout({ redirectUri: redirectUri }).then(function () {
                        (0, helpers_1.removeTokens)(_this.config);
                    })];
            });
        }); };
        /**
         * Redirects the user to the register page
         */
        _this.register = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.clientId) || !this.config.baseUrl || !this.keycloak) {
                    throw new Error('Service not initialized!');
                }
                return [2 /*return*/, this.keycloak.register()];
            });
        }); };
        /**
         * @returns if the user is authenticated
         */
        _this.isAuthenticated = function () {
            if (!_this.keycloak) {
                throw new Error('Service not initialized!');
            }
            return !!_this.keycloak.authenticated;
        };
        /**
         * Checks if the refresh token has expired and if it has, logs the user out, if it hasn't, updates the access and refresh tokens
         */
        _this.checkIfTokenHasExpired = function () {
            if (_this.isRefreshTokenExpired()) {
                _this.logout();
                throw new Error('Refresh token has expired!');
            }
            else {
                _this.updateToken();
            }
        };
        /**
        * @returns if the refresh token is expired
        */
        _this.isRefreshTokenExpired = function () {
            // Get the expiration time of the refresh token (in seconds)
            var refreshTokenExp = _this.keycloak.refreshTokenParsed.exp;
            // Get the current time (in seconds)
            var currentTime = Math.floor(new Date().getTime() / 1000);
            // Check if the refresh token has expired
            return currentTime >= refreshTokenExp;
        };
        /**
         * @returns the number of seconds until the refresh token expires
         */
        _this.getSecondsUntilTokenExpiration = function () {
            var refreshTokenExpiryTime = _this.keycloak.refreshTokenParsed.exp;
            var currentTimestamp = Math.floor(new Date().getTime() / 1000);
            var secondsUntilExpiry = refreshTokenExpiryTime - currentTimestamp;
            return secondsUntilExpiry;
        };
        return _this;
    }
    return KeycloakServiceDefault;
}(AuthServiceBase_1.AuthServiceBase));
exports.KeycloakServiceDefault = KeycloakServiceDefault;
