"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItem = exports.removeTokens = exports.setTokens = exports.stringReplace = void 0;
var constants_1 = require("./constants");
// String
var stringReplace = function (string, parts) {
    var newString = string.slice();
    parts.forEach(function (el) {
        newString = newString.replace(el.key, el.value);
    });
    return newString;
};
exports.stringReplace = stringReplace;
// Local Storage
var getTokensKeys = function (config) { return ({
    access: config.tokenStorageKey || constants_1.KEY_ACCESS_TOKEN,
    refresh: config.refreshTokenStorageKey || constants_1.KEY_REFRESH_TOKEN,
    expiration_date: config.expirationDateStorageKey || constants_1.KEY_EXPIRATION_DATE,
    expiration_refresh: config.expirationRefreshDateStorageKey || constants_1.KEY_EXPIRATION_REFRESH
}); };
// Save the access token and refresh token in the Local Storage.
var setTokens = function (config, values) {
    var keys = getTokensKeys(config);
    var access = values.access, refresh = values.refresh, expiration_date = values.expiration_date, expiration_refresh = values.expiration_refresh;
    try {
        access && localStorage.setItem(keys.access, access);
        refresh && localStorage.setItem(keys.refresh, refresh);
        expiration_date && localStorage.setItem(keys.expiration_date, expiration_date);
        expiration_refresh && localStorage.setItem(keys.expiration_refresh, expiration_refresh);
    }
    catch (_a) {
        throw new Error('Error setting tokens in localStorage');
    }
};
exports.setTokens = setTokens;
// Remove the access token and refresh token from Local Storage.
var removeTokens = function (config) {
    var keys = getTokensKeys(config);
    try {
        localStorage.removeItem(keys.access);
        localStorage.removeItem(keys.refresh);
        localStorage.removeItem(keys.expiration_date);
        localStorage.removeItem(keys.expiration_refresh);
    }
    catch (_a) {
        throw new Error('Error removing tokens from localStorage');
    }
};
exports.removeTokens = removeTokens;
// Gets item from Local storage by given key
var getItem = function (key) {
    try {
        var item = localStorage.getItem(key);
        return item;
    }
    catch (_a) {
        throw new Error("Error getting item with key: ".concat(key, " from localStorage"));
    }
};
exports.getItem = getItem;
